init
───────────────────────────────────────────────────────────
let squareSize = xy(64, 64)

let cursor = xy(1, 1)

let player = 1

let player2IsAI = true

let winner = 0

const colors = [#0, rgb(1.0, 0.2, 0.2), rgb(0.2, 1.0, 0.2)]

let board = [0, 0, 0,
             0, 0, 0,
             0, 0, 0]


def bAll(b, i0, i1, i2):
    return (b[i0] == b[i1]) and (b[i1] == b[i2])

def winningColumn(b):
    for 0 <= x < 3:
        if bAll(b, x, x + 3, x + 6) and b[x] != 0:
            return x
    return -1

def winningRow(b):
    for 0 <= y < 3:
        if bAll(b, 3y, 3y + 1, 3y + 2) and b[3y] != 0:
            return y
    return -1

def winningDiagonal(b):
    if bAll(b, 0, 4, 8) and b[0] != 0:
        return 0
    if bAll(b, 2, 4, 6) and b[2] != 0:
        return 1
    return -1

// All that is needed to implement min max AI
def scoreForBoardAndPlayer(b, p):
    let col = winningColumn(b)
    if col >= 0:
        return if p == b[col] then 100 else -100
    let row = winningRow(b)
    if row >= 0:
        return if p == b[3row] then 100 else -100
    let diag = winningDiagonal(b)
    if diag >= 0:
        return if p == b[2diag] then 100 else -100
    let score = 0
    let weightPerIndex = [3, 2, 3,
                          2, 4, 2,
                          3, 2, 3]
    for 0 <= i < 9:
        if b[i] != 0:
            let s = weightPerIndex[i]
            score += if b[i] == p then s else -s
    return score

def bestMoveIndexAndScore(b, p, depth):
    let bestScore = -1000
    let bestIndex = -1
    for 0 <= i < 9:
        if b[i] == 0:
            let bcopy = deep_clone(b)
            bcopy[i] = p
            let score = scoreForBoardAndPlayer(bcopy, p)
            if score < 100 and depth > 0: // only recurse if not an instant win at this depth
                score -= bestMoveIndexAndScore(bcopy, if p == 1 then 2 else 1, depth - 1)[1]
            if score > bestScore:
                bestScore = score
                bestIndex = i
    if bestIndex == -1:
        return [0, 0]
    return [bestIndex, bestScore]

def aiMove(b, p):
    let bestIndex = bestMoveIndexAndScore(b, p, 3)[0]
    b[bestIndex] = p
    return

enter(reason, player1Status, player2Status)
───────────────────────────────────────────────────────────
if player2Status == "human":
    player2IsAI = false
else:
    player2IsAI = true

frame
───────────────────────────────────────────────────────────
if winner == 0:
    cursor += xy(joy.xx, joy.yy)
    if cursor.x < 0: cursor.x = 2
    if cursor.x > 2: cursor.x = 0
    if cursor.y < 0: cursor.y = 2
    if cursor.y > 2: cursor.y = 0


let center = SCREEN_SIZE / 2
draw_line(center - squareSize * xy(1, 3) / 2, center - squareSize * xy(1, -3) / 2, #c)
draw_line(center + squareSize * xy(1, 3) / 2, center + squareSize * xy(1, -3) / 2, #c)
draw_line(center - squareSize * xy(3, 1) / 2, center - squareSize * xy(-3, 1) / 2, #c)
draw_line(center + squareSize * xy(3, 1) / 2, center + squareSize * xy(-3, 1) / 2, #c)

if winner == 0:
    draw_rect(center - squareSize + cursor * squareSize, squareSize - xy(3, 3), #0, colors[player])

    if player2IsAI and player == 2:
        aiMove(board, player)
        player = 1
    else if board[3cursor.y + cursor.x] == 0:
        let msg = replace(if player == 1 then "press (a) to place your X" else "press (a) to place your O", joy.prompt)
        draw_text(font, msg, xy(½ SCREEN_SIZE.x, SCREEN_SIZE.y - 10), #a, #0, #0, "center")
        if joy.pressed_a:
            board[3cursor.y + cursor.x] = player
            player = if player == 1 then 2 else 1

let popCount = 0
for 0 <= x < 3:
    for 0 <= y < 3:
        let value = board[3y + x]
        let pos = center - squareSize + xy(x, y) * squareSize
        let size = squareSize - xy(6, 6)
        if value != 0:
            popCount += 1
            if value == 1:
                draw_line(pos - size / 2, pos + size / 2, colors[value])
                draw_line(pos - size * xy(1, -1) / 2, pos + size * xy(1, -1) / 2, colors[value])
            else:
                draw_disk(pos, size.x / 2, ∅, colors[value])

let col = winningColumn(board)
if col >= 0:
    draw_line(center + squareSize * xy(col - 1, - 1), center + squareSize * xy(col - 1, 1), #f, 0, 3)
    winner = board[col]
let row = winningRow(board)
if row >= 0:
    draw_line(center + squareSize * xy(-1, row - 1), center + squareSize * xy(1, row - 1), #f, 0, 3)
    winner = board[3row]
let diag = winningDiagonal(board)
if diag == 0:
    draw_line(center + squareSize * xy(-1, -1), center + squareSize * xy(1, 1), #f, 0, 3)
    winner = board[0]
if diag == 1:
    draw_line(center + squareSize * xy(1, -1), center + squareSize * xy(-1, 1), #f, 0, 3)
    winner = board[2]
   
if winner == 0 and popCount == 9: set_mode(EndGame, "stalemate")

if joy.pressed_q: set_mode(EndGame, "pressed_q")
